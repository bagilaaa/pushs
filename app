import io
import os
import re
import zipfile
import datetime as dt
import pandas as pd
import numpy as np
import streamlit as st

# ================== PAGE & THEME ==================
st.set_page_config(page_title="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", page_icon="üì≤", layout="wide")

# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
CORP_GREEN = "#2DBE60"
CORP_GOLD  = "#C8A86B"
DARK_BG    = "#0F1115"
CARD_BG    = "#161A22"
TEXT       = "#E6E6EB"
MUTED      = "#9AA0A6"

CSS = f"""
<style>
:root {{
  --green: {CORP_GREEN};
  --gold:  {CORP_GOLD};
  --bg:    {DARK_BG};
  --card:  {CARD_BG};
  --text:  {TEXT};
  --muted: {MUTED};
}}
.block-container {{ padding-top: 3.6rem !important; }}
html, body, [data-testid="stAppViewContainer"] {{
  background:
    radial-gradient(1100px 550px at 8% 8%, rgba(45,190,96,.15), transparent 40%),
    radial-gradient(900px 450px at 95% 15%, rgba(200,168,107,.12), transparent 40%),
    var(--bg);
  color: var(--text);
}}
h1, h2, h3, h4, h5 {{ color: var(--text); }}
.sidebar .sidebar-content, [data-testid="stSidebar"] > div:first-child {{ background: var(--card); }}
div.stButton > button {{
  background: linear-gradient(90deg, var(--green), #00d4ff);
  color: white; border: 0; border-radius: 14px; padding: .6rem 1rem; font-weight: 700;
}}
div.stDownloadButton > button {{
  background: linear-gradient(90deg, #00c853, #64dd17);
  color: #081208; border: 0; border-radius: 14px; padding: .6rem 1rem; font-weight: 700;
}}
[data-testid="stFileUploader"] {{
  background: var(--card); border-radius: 12px; border: 1px solid rgba(255,255,255,.08);
}}
.card {{ background: var(--card); border: 1px solid rgba(255,255,255,.06); border-radius: 16px; padding: 14px 16px; }}
.muted {{ color: var(--muted); font-size:.9rem; }}
table td, table th {{ color: var(--text); }}
</style>
"""
st.markdown(CSS, unsafe_allow_html=True)

st.markdown("## üì≤ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

# ================== –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ==================
P_TRAVEL = "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"
P_PREM   = "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
P_CC     = "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
P_FX     = "–û–±–º–µ–Ω –≤–∞–ª—é—Ç"
P_CASH   = "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏"
P_DEP_MULTI = "–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π (KZT/USD/RUB/EUR)"
P_DEP_SAVE  = "–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π (–∑–∞—â–∏—Ç–∞ KDIF)"
P_DEP_ACC   = "–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π"
P_INV    = "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
P_GOLD   = "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏"
ALL_PRODUCTS = [P_TRAVEL,P_PREM,P_CC,P_FX,P_CASH,P_DEP_MULTI,P_DEP_SAVE,P_DEP_ACC,P_INV,P_GOLD]

# ================== –£—Ç–∏–ª–∏—Ç—ã ==================
def month_name_ru_prep(ts):
    m = ['—è–Ω–≤–∞—Ä–µ','—Ñ–µ–≤—Ä–∞–ª–µ','–º–∞—Ä—Ç–µ','–∞–ø—Ä–µ–ª–µ','–º–∞–µ','–∏—é–Ω–µ','–∏—é–ª–µ','–∞–≤–≥—É—Å—Ç–µ','—Å–µ–Ω—Ç—è–±—Ä–µ','–æ–∫—Ç—è–±—Ä–µ','–Ω–æ—è–±—Ä–µ','–¥–µ–∫–∞–±—Ä–µ']
    return m[ts.month-1]

def fmt_int_kzt(a):
    try: return f"{int(round(float(a))):,}".replace(",", " ") + " ‚Ç∏"
    except Exception: return "0 ‚Ç∏"

def clamp_push(txt:str, max_len=220) -> str:
    txt = re.sub(r"\s+", " ", str(txt)).strip()
    txt = re.sub(r"!{2,}", "!", txt)
    return txt[:max_len].rstrip()

def tweak_for_age(text:str, age:int) -> str:
    if age is None or pd.isna(age): return text
    if age < 50:
        text = text.replace("–û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å.", "–û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å ‚Äî –∏ –∫–µ—à–±—ç–∫ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–∞—Å.")
        text = text.replace("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.", "–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É ‚Äî –∏ —á–∞—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–µ—Ä–Ω—ë—Ç—Å—è –∑–∞–º–µ—Ç–Ω–µ–µ.")
        text = text.replace("–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É.", "–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–≥–æ–≤.")
    else:
        text = text.replace("–Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–∞—Å", "–±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        text = text.replace("–∑–∞–º–µ—Ç–Ω–µ–µ", "–±–æ–ª—å—à–µ")
    return text

# ================== –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ ==================
def read_clients(zf):
    return pd.read_csv(zf.open('case 1/clients.csv'))

def read_client_frames(zf, code:int):
    tx_cols = ['client_code','name','product','status','city','date','category','amount','currency']
    tr_cols = ['client_code','name','product','status','city','date','type','direction','amount','currency']
    try:
        tx = pd.read_csv(zf.open(f'case 1/client_{code}_transactions_3m.csv'), parse_dates=['date'])
    except KeyError:
        tx = pd.DataFrame(columns=tx_cols)
    try:
        tr = pd.read_csv(zf.open(f'case 1/client_{code}_transfers_3m.csv'), parse_dates=['date'])
    except KeyError:
        tr = pd.DataFrame(columns=tr_cols)
    return tx, tr

# ================== –í—ã–≥–æ–¥–∞ (KZT/–º–µ—Å) ==================
def expected_benefits(profile, tx, tr):
    out = {p: 0.0 for p in ALL_PRODUCTS}
    months = 3
    if len(tx)==0 and len(tr)==0: return out
    cat_month = tx.groupby('category')['amount'].sum() / months if len(tx) else pd.Series(dtype=float)
    total_month = tx['amount'].sum() / months if len(tx) else 0.0
    avg_bal = float(profile.get('avg_monthly_balance_KZT', 0) or 0)

    travel_month = sum(cat_month.get(c,0) for c in ['–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è','–¢–∞–∫—Å–∏','–û—Ç–µ–ª–∏'])
    out[P_TRAVEL] = 0.04 * travel_month

    prem_rate = 0.02
    if 1_000_000 <= avg_bal < 6_000_000: prem_rate = 0.03
    if avg_bal >= 6_000_000: prem_rate = 0.04
    rest = cat_month.get('–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã',0)
    jewel = cat_month.get('–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è',0)
    perfume = cat_month.get('–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è',0)
    base_spend = max(total_month - (rest+jewel+perfume), 0)
    prem_b = prem_rate * base_spend + 0.04*(rest+jewel+perfume)
    out[P_PREM] = min(prem_b, 100_000)

    fav3 = cat_month.sort_values(ascending=False).head(3).sum() if len(cat_month) else 0
    online = sum(cat_month.get(c,0) for c in ['–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞','–ò–≥—Ä–∞–µ–º –¥–æ–º–∞','–ï–¥–∏–º –¥–æ–º–∞','–ö–∏–Ω–æ','–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'])
    out[P_CC] = 0.10 * fav3 + 0.10 * online

    fx_vol_m = float(tr[tr['type'].isin(['fx_buy','fx_sell'])]['amount'].abs().sum())/months if len(tr) else 0.0
    out[P_FX] = 0.003 * fx_vol_m

    out[P_DEP_SAVE]  = 0.165 * avg_bal / 12
    out[P_DEP_ACC]   = 0.155 * avg_bal / 12
    out[P_DEP_MULTI] = 0.145 * avg_bal / 12

    return out

# ================== –°–∏–≥–Ω–∞–ª—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è ==================
def make_signals(profile, tx, tr):
    sig = {}
    sig["client_code"] = int(profile.get("client_code"))
    sig["name"] = profile.get("name", "–ö–ª–∏–µ–Ω—Ç")
    sig["age"] = int(profile.get("age", 0) or 0)
    sig["status"] = profile.get("status", "")
    sig["city"] = profile.get("city", "")
    sig["avg_balance"] = float(profile.get("avg_monthly_balance_KZT", 0) or 0)
    def sum_cat(cats):
        if len(tx)==0: return 0.0
        return float(tx[tx['category'].isin(cats)]['amount'].sum())
    sig["total_spend_3m"] = float(tx['amount'].sum()) if len(tx) else 0.0
    sig["travel_spend_3m"] = sum_cat(['–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è','–¢–∞–∫—Å–∏','–û—Ç–µ–ª–∏'])
    sig["restaurants_3m"] = sum_cat(['–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'])
    sig["online_3m"] = sum_cat(['–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞','–ò–≥—Ä–∞–µ–º –¥–æ–º–∞','–ï–¥–∏–º –¥–æ–º–∞','–ö–∏–Ω–æ','–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'])
    sig["taxi_count"] = int((tx['category']=='–¢–∞–∫—Å–∏').sum()) if len(tx) else 0
    if len(tx):
        top3 = tx.groupby('category')['amount'].sum().sort_values(ascending=False).head(3)
        sig["top_categories"] = list(top3.index)
    else:
        sig["top_categories"] = []
    fx_vol = float(tr[tr['type'].isin(['fx_buy','fx_sell'])]['amount'].abs().sum()) if len(tr) else 0.0
    sig["fx_turnover_3m"] = fx_vol
    sig["has_salary"] = bool(len(tr) and (tr['type']=='salary_in').any())
    return sig

# ================== –°–∫–æ—Ä–∏–Ω–≥ + –±–∞–∑–æ–≤—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ ==================
def pick_best_and_push(profile, tx, tr):
    name    = profile.get('name', '–ö–ª–∏–µ–Ω—Ç')
    avg_bal = profile.get('avg_monthly_balance_KZT', 0)
    age     = profile.get('age', None)

    months = 3
    total_spend = float(tx['amount'].sum()) if len(tx) else 0.0
    cat_sum = tx.groupby('category')['amount'].sum().sort_values(ascending=False) if len(tx) else pd.Series(dtype=float)
    fav_cats = list(cat_sum.head(3).index) if len(cat_sum) else []
    def sum_cat(cats): return float(tx[tx['category'].isin(cats)]['amount'].sum()) if len(tx) else 0.0

    travel_spend  = sum_cat(['–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è','–û—Ç–µ–ª–∏','–¢–∞–∫—Å–∏'])
    taxi_cnt      = int((tx['category']=='–¢–∞–∫—Å–∏').sum()) if len(tx) else 0
    hotels_cnt    = int((tx['category']=='–û—Ç–µ–ª–∏').sum()) if len(tx) else 0
    rest_spend    = sum_cat(['–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'])
    jew_perf      = sum_cat(['–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è','–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è'])
    online_spend  = sum_cat(['–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞','–ò–≥—Ä–∞–µ–º –¥–æ–º–∞','–ï–¥–∏–º –¥–æ–º–∞','–ö–∏–Ω–æ','–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'])

    fx_vol     = float(tr[tr['type'].isin(['fx_buy','fx_sell'])]['amount'].abs().sum()) if len(tr) else 0.0
    atm_vol    = float(tr[tr['type']=='atm_withdrawal']['amount'].abs().sum()) if len(tr) else 0.0
    card_out   = float(tr[tr['type']=='card_out']['amount'].abs().sum()) if len(tr) else 0.0
    kz_transfs = atm_vol + card_out
    invest_vol = float(tr[tr['type'].isin(['invest_out','invest_in'])]['amount'].abs().sum()) if len(tr) else 0.0
    gold_vol   = float(tr[tr['type'].isin(['gold_buy_out','gold_sell_in'])]['amount'].abs().sum()) if len(tr) else 0.0
    salary_in  = float(tr[tr['type']=='salary_in']['amount'].sum()) if len(tr) else 0.0
    stipend_in = float(tr[tr['type']=='stipend_in']['amount'].sum()) if len(tr) else 0.0

    top3_spend = float(cat_sum.head(3).sum()) if len(cat_sum) else 0.0

    scores = {p:0.0 for p in ALL_PRODUCTS}
    scores[P_TRAVEL] = (travel_spend / max(1, total_spend)) * 100 + taxi_cnt*0.1 + hotels_cnt*0.2
    scores[P_PREM]   = (avg_bal>=1_000_000)*10 + (avg_bal>=6_000_000)*10 + (kz_transfs/max(1,total_spend))*10 + (rest_spend>0)*3 + (jew_perf>0)*5
    scores[P_CC]     = (top3_spend/max(1,total_spend))*30 + (online_spend>0)*5 + (salary_in>0 or stipend_in>0)*2
    scores[P_FX]     = (fx_vol>0)*15 + (fx_vol/(abs(tr['amount']).sum() or 1))*10 if len(tr) else 0
    free_cash_signal = (avg_bal>200_000) * (total_spend/months < avg_bal*0.5)
    scores[P_DEP_SAVE]  = (avg_bal>500_000)*5 + (free_cash_signal)*5
    scores[P_DEP_ACC]   = (avg_bal>200_000)*4 + (salary_in>0)*2
    scores[P_DEP_MULTI] = (avg_bal>300_000)*2
    scores[P_INV]    = (invest_vol>0)*10 + (avg_bal<800_000)*3 + (salary_in>0)*2
    scores[P_GOLD]   = (gold_vol>0)*15 + (avg_bal>1_000_000)*2
    scores[P_CASH]   = 0

    benefits = expected_benefits(profile, tx, tr)
    for p in benefits: scores[p] += np.log1p(max(0.0, benefits[p]))

    ranked = sorted(scores.items(), key=lambda kv: kv[1], reverse=True)
    best = ranked[0][0]

    last_month = (tx['date'].max().to_pydatetime().date().replace(day=1)
                  if len(tx) else dt.date(2025,8,1))
    m_prep = month_name_ru_prep(pd.Timestamp(last_month))

    # –±–∞–∑–æ–≤—ã–π —Ñ–æ–ª–ª–±–µ–∫-—Ç–µ–∫—Å—Ç (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)
    if best == P_TRAVEL:
        gain = benefits[P_TRAVEL]
        push = f"{name}, –≤ {m_prep} —É –≤–∞—Å –º–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫ –∏ —Ç–∞–∫—Å–∏. –° –∫–∞—Ä—Ç–æ–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —á–∞—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–µ—Ä–Ω—É–ª–∞—Å—å –±—ã –∫–µ—à–±—ç–∫–æ–º ‚âà{fmt_int_kzt(gain)} –≤ –º–µ—Å—è—Ü. –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É."
    elif best == P_PREM:
        gain = benefits[P_PREM]
        push = f"{name}, —É –≤–∞—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–µ—Ä–Ω—ë—Ç –¥–æ 4% –∏ —Å–Ω–∏–º–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏; –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª ‚âà{fmt_int_kzt(gain)} –≤ –º–µ—Å—è—Ü. –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å."
    elif best == P_CC:
        gain = benefits[P_CC]
        cats = ", ".join(fav_cats[:3]) if fav_cats else "–≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
        push = f"{name}, –≤–∞—à–∏ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {cats}. –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—ë—Ç –¥–æ 10% –∏ –æ–Ω–ª–∞–π–Ω-–∫–µ—à–±—ç–∫; –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ ‚âà{fmt_int_kzt(gain)} –≤ –º–µ—Å—è—Ü. –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É."
    elif best == P_FX:
        gain = benefits[P_FX]
        push = f"{name}, –≤—ã —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—Ç–µ –≤–∞–ª—é—Ç—É. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –≤—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å –∏ –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É; —ç–∫–æ–Ω–æ–º–∏—è ‚âà{fmt_int_kzt(gain)} –≤ –º–µ—Å—è—Ü. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±–º–µ–Ω."
    elif best == P_DEP_SAVE:
        gain = benefits[P_DEP_SAVE]
        push = f"{name}, —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ 16,50% ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ ‚âà{fmt_int_kzt(gain)} –≤ –º–µ—Å—è—Ü –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –æ—Å—Ç–∞—Ç–∫–µ. –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥."
    elif best == P_DEP_ACC:
        gain = benefits[P_DEP_ACC]
        push = f"{name}, —É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ç—å –±–µ–∑ —Å–Ω—è—Ç–∏—è –¥–æ —Ü–µ–ª–∏. –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ 15,50% –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –¥–∞—Å—Ç ‚âà{fmt_int_kzt(gain)} –≤ –º–µ—Å—è—Ü. –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥."
    elif best == P_DEP_MULTI:
        gain = benefits[P_DEP_MULTI]
        push = f"{name}, –¥–µ—Ä–∂–∏—Ç–µ —á–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –≤ –≤–∞–ª—é—Ç–∞—Ö. –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –≤–∫–ª–∞–¥ 14,50% ‚Äî ‚âà{fmt_int_kzt(gain)} –≤ –º–µ—Å—è—Ü —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å—Ä–µ–¥—Å—Ç–≤–∞–º. –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥."
    elif best == P_INV:
        push = f"{name}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ —Å—Ç–∞—Ä—Ç –∏ –ø–æ—Ä–æ–≥ –æ—Ç 6 ‚Ç∏. –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º—ã –∏ –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –ø–æ –ø–ª–∞–Ω—É. –û—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç."
    elif best == P_GOLD:
        push = f"{name}, –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è ‚Äî –∑–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏ 999,9: –ø–æ–∫—É–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏, –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    else:
        push = f"{name}, —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –≤—ã–≥–æ–¥—ã –æ—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫—É."

    signals = make_signals(profile, tx, tr)
    signals["month_prep"] = m_prep
    signals["best_product"] = best
    signals["benefit_best"] = benefits.get(best, 0.0)

    # ==== –í–ê–†–ò–ê–¢–ò–í–ù–´–ô –ü–£–® (seed = client_code) ====
    push = generate_push_variant(best, benefits, signals)

    # –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ + –¥–ª–∏–Ω–∞
    push = clamp_push(tweak_for_age(push, signals["age"]))

    return best, push, ranked, benefits, signals

# ================== –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—à (–±–µ–∑ –ò–ò) ==================
def generate_push_variant(best_product:str, benefits:dict, s:dict) -> str:
    rng = np.random.RandomState(int(s.get("client_code", 0)) % (2**32))
    name = s.get("name", "–ö–ª–∏–µ–Ω—Ç")
    city = s.get("city") or ""
    month = s.get("month_prep") or ""
    gain = fmt_int_kzt(benefits.get(best_product, 0))
    cats = s.get("top_categories", []) or []
    taxi = s.get("taxi_count", 0)
    online = int(round(s.get("online_3m", 0)))
    travel = int(round(s.get("travel_spend_3m", 0)))
    avg_bal = int(round(s.get("avg_balance", 0)))
    has_salary = s.get("has_salary", False)

    hooks = [
        f"{name}, –∑–∞–º–µ—Ç–∏–ª–∏ –≤–∞—à —Å—Ç–∏–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤",
        f"{name}, –ø–æ –≤–∞—à–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –≤ {month}",
        f"{name}, –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞—Ç—ã",
        f"{name}, —É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
    ]
    if city: hooks += [f"{name}, –≤ {city} —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ", f"{name}, —É—á–∏—Ç—ã–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ {city}"]

    verbs = ["–≤–µ—Ä–Ω—É–ª –±—ã –∫–µ—à–±—ç–∫–æ–º", "—Å—ç–∫–æ–Ω–æ–º–∏–ª –±—ã", "–¥–∞–ª –±—ã –≤—ã–≥–æ–¥—ã", "–º–æ–≥ –±—ã –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤—ã–≥–æ–¥—É"]
    online_hint = "" if online == 0 else f" –∏ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–∏ ‚âà{fmt_int_kzt(online)} –∑–∞ 3 –º–µ—Å."
    taxi_hint = "" if taxi == 0 else f" –ß–∞—Å—Ç–æ —Ç–∞–∫—Å–∏ ({taxi} –ø–æ–µ–∑–¥.)."
    travel_hint = "" if travel == 0 else f" –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –Ω–∞ —Å—É–º–º—É ‚âà{fmt_int_kzt(travel)} –∑–∞ 3 –º–µ—Å."

    ctas = {
        P_TRAVEL: ["–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É.", "–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è."],
        P_PREM: ["–û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å.", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º.", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏."],
        P_CC: ["–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É.", "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É.", "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É."],
        P_FX: ["–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±–º–µ–Ω.", "–í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫—É.", "–û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å-—Ü–µ–ª—å."],
        P_DEP_SAVE: ["–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥.", "–ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å.", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫."],
        P_DEP_ACC: ["–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥.", "–ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å –∫ —Ü–µ–ª–∏.", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ."],
        P_DEP_MULTI: ["–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥.", "–†–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ –≤–∞–ª—é—Ç–∞–º.", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–≤–∫–∏."],
        P_INV: ["–û—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç.", "–ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.", "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –º–∏–Ω–∏-—Å—É–º–º—ã."],
        P_GOLD: ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏.", "–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑.", "–£–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è."],
        P_CASH: ["–£–∑–Ω–∞—Ç—å –ª–∏–º–∏—Ç.", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."]
    }

    hook = rng.choice(hooks)
    cta = rng.choice(ctas.get(best_product, ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏."]))
    verb = rng.choice(verbs)

    # —Ä–∞–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–¥ –ø—Ä–æ–¥—É–∫—Ç
    if best_product == P_TRAVEL:
        body = f"–≤ {month} —É –≤–∞—Å –º–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫.{taxi_hint}{travel_hint} –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π {verb} ‚âà{gain} –≤ –º–µ—Å."
    elif best_product == P_PREM:
        tier = "–¥–æ 4%" if avg_bal >= 1_000_000 else "2‚Äì3%"
        body = f"–≤—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç {tier} –∫–µ—à–±—ç–∫–∞ –∏ —Å–Ω–∏–∑–∏—Ç –∫–æ–º–∏—Å—Å–∏–∏ ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª ‚âà{gain} –≤ –º–µ—Å."
    elif best_product == P_CC:
        cats_str = ", ".join(cats[:3]) if cats else "–≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
        body = f"–≤–∞—à–∏ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {cats_str}.{online_hint} –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ 10% –∫–µ—à–±—ç–∫–∞ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä ‚âà{gain} –≤ –º–µ—Å."
    elif best_product == P_FX:
        body = f"–≤—ã —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—Ç–µ –≤–∞–ª—é—Ç—É. –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –∏ –≤—ã–≥–æ–¥–Ω—ã–µ –∫—É—Ä—Å—ã ‚Äî —ç–∫–æ–Ω–æ–º–∏—è ‚âà{gain} –≤ –º–µ—Å."
    elif best_product == P_DEP_SAVE:
        body = f"—Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ 16,50% ‚Äî ‚âà{gain} –≤ –º–µ—Å. –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –æ—Å—Ç–∞—Ç–∫–µ."
    elif best_product == P_DEP_ACC:
        extra = " —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if has_salary else ""
        body = f"—É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ç—å –∫ —Ü–µ–ª–∏{extra}. –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ 15,50% –¥–∞—Å—Ç ‚âà{gain} –≤ –º–µ—Å."
    elif best_product == P_DEP_MULTI:
        body = f"—á–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –ª—É—á—à–µ –¥–µ—Ä–∂–∞—Ç—å –≤ –≤–∞–ª—é—Ç–∞—Ö. –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –≤–∫–ª–∞–¥ 14,50% ‚Äî ‚âà{gain} –≤ –º–µ—Å. –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø."
    elif best_product == P_INV:
        body = "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ —Å—Ç–∞—Ä—Ç, –ø–æ—Ä–æ–≥ –æ—Ç 6 ‚Ç∏. –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º—ã –ø–æ –ø–ª–∞–Ω—É."
    elif best_product == P_GOLD:
        body = "–¥–ª—è –¥–æ–ª–≥–æ–≥–æ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è ‚Äî —Å–ª–∏—Ç–∫–∏ 999,9: –ø–æ–∫—É–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏, –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
    else:
        body = "–ø–æ–¥–æ–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–¥—É—Ç –±–æ–ª—å—à–µ –≤—ã–≥–æ–¥—ã –æ—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."

    text = f"{hook}: {body} {cta}"
    # —Ü–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞
    if len(text) < 180:
        add = rng.choice([
            " –í—Å—ë –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç.",
            " –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–≥–æ–≤ ‚Äî –∑–∞ 1‚Äì2 –º–∏–Ω—É—Ç—ã.",
            " –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∏ –±–µ–∑ –º–µ–ª–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞.",
            " –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –æ–¥–∏–Ω —Ç–∞–ø."
        ])
        text = text + add
    return text

# ================== –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—É—à–∞ (—Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–º —Å—Ç–∏–ª–µ–º) ==================
def generate_push_ai(api_key:str, temperature:float, signals:dict, base_text:str) -> str:
    from openai import OpenAI
    client = OpenAI(api_key=api_key)
    cta_map = {
        P_TRAVEL: ["–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É.", "–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è."],
        P_PREM: ["–û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å.", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º.", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏."],
        P_CC: ["–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É.", "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É.", "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É."],
        P_FX: ["–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±–º–µ–Ω.", "–í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫—É.", "–û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å-—Ü–µ–ª—å."],
        P_DEP_SAVE: ["–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥.", "–ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å.", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫."],
        P_DEP_ACC: ["–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥.", "–ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å –∫ —Ü–µ–ª–∏.", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ."],
        P_DEP_MULTI: ["–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥.", "–†–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ –≤–∞–ª—é—Ç–∞–º.", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–≤–∫–∏."],
        P_INV: ["–û—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç.", "–ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.", "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –º–∏–Ω–∏-—Å—É–º–º—ã."],
        P_GOLD: ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏.", "–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑.", "–£–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è."],
        P_CASH: ["–£–∑–Ω–∞—Ç—å –ª–∏–º–∏—Ç.", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."]
    }
    cta_options = cta_map.get(signals["best_product"], ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏."])
    style_seed = int(signals.get("client_code", 0)) % 10000
    sys_prompt = (
        "–¢—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–∞–Ω–∫–∞. –í–µ—Ä–Ω–∏ –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—à 180‚Äì220 —Å–∏–º–≤–æ–ª–æ–≤: —Ö—É–∫ ‚Üí –ø–æ–ª—å–∑–∞ ‚Üí CTA."
        " –ù–∞ ¬´–≤—ã¬ª, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –∫–∞–ø—Å–∞/–¥–∞–≤–ª–µ–Ω–∏—è. –§–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã: 27 400 ‚Ç∏. "
        "–í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ä–∞–∑–ª–∏—á–∞–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (–º–µ–Ω—è–π —Ö—É–∫, –ø–æ—Ä—è–¥–æ–∫, —Å–∏–Ω–æ–Ω–∏–º—ã), –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—É—Ç—å. "
        "–°—Ç–∏–ª—å —Ñ–∏–∫—Å–∏—Ä—É–π –ø–æ style_id –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç."
    )
    ctx = {
        "style_id": style_seed,
        "best_product": signals.get("best_product"),
        "benefit_best_month": int(round(signals.get("benefit_best", 0.0))),
        "name": signals.get("name"),
        "age": signals.get("age"),
        "city": signals.get("city"),
        "month": signals.get("month_prep"),
        "top_categories": signals.get("top_categories"),
        "taxi_count": signals.get("taxi_count", 0),
        "avg_balance": int(round(signals.get("avg_balance", 0))),
        "cta_choices": cta_options
    }
    user_prompt = (
        "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –∏ —É–ª—É—á—à–∞–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ CTA –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
        f"BASE: {base_text}\n"
        f"CONTEXT: {ctx}\n"
        "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—à."
    )
    ans = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role":"system","content":sys_prompt},{"role":"user","content":user_prompt}],
        temperature=float(temperature), max_tokens=200
    )
    return clamp_push(ans.choices[0].message.content.strip())

# ================== –õ–æ–∫–∞–ª—å–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã ==================
def answer_local(msg:str):
    low = msg.lower().strip()

    if re.search(r"\b—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤\b", low):
        if st.session_state.clients is None: return "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª."
        return f"–ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {len(st.session_state.clients)}."

    if re.search(r"\b(—Å—Ä–µ–¥–Ω(–∏–π|–∞—è)\s+–±–∞–ª–∞–Ω—Å|average balance)\b", low):
        if st.session_state.clients is None: return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP."
        v = st.session_state.clients.get("avg_monthly_balance_KZT", pd.Series(dtype=float)).mean()
        return f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º: {fmt_int_kzt(v)}."

    m = re.search(r"–ø–æ –ø—Ä–æ–¥—É–∫—Ç—É\s+(.+)$", low)
    if m and st.session_state.df is not None:
        q = m.group(1).strip()
        sub = st.session_state.df[st.session_state.df['product'].str.contains(q, case=False, na=False)]
        return f"{len(sub)} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º ¬´{q}¬ª."

    if low in ("—á–∞—Å—Ç–æ", "—Ç–æ–ø –ø—Ä–æ–¥—É–∫—Ç", "–∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç —á–∞—â–µ –≤—Å–µ–≥–æ"):
        if st.session_state.df is None: return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP."
        top = st.session_state.df['product'].value_counts().head(3)
        lines = [f"‚Ä¢ {k}: {v}" for k,v in top.items()]
        return "–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n" + "\n".join(lines)

    m = re.search(r"push\s+(\d+)", low)
    if m and st.session_state.df is not None:
        code = int(m.group(1))
        row = st.session_state.df[st.session_state.df["client_code"]==code]
        if len(row)==0: return "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        r = row.iloc[0]
        return f"{r['client_code']}: {r['product']}\n{r['push_notification']}"

    m = re.search(r"(—Å–∏–≥–Ω–∞–ª—ã|–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\s+(\d+)", low)
    if m:
        code = int(m.group(2))
        if 'signals' not in st.session_state or code not in st.session_state.signals:
            return "–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑."
        s = st.session_state.signals[code]
        return ("–°–∏–≥–Ω–∞–ª—ã –∫–ª–∏–µ–Ω—Ç–∞ "
                f"{code}: —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏={s.get('top_categories')}, —Ç–∞–∫—Å–∏={s.get('taxi_count')}, "
                f"–æ–Ω–ª–∞–π–Ω={int(s.get('online_3m',0))}, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è={int(s.get('travel_spend_3m',0))}, "
                f"–±–∞–ª–∞–Ω—Å={fmt_int_kzt(s.get('avg_balance',0))}.")

    return None  # –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏

# ================== –°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Ñ–∏–ª—å—Ç—Ä—ã/–∞–≥—Ä–µ–≥–∞—Ç—ã/—Å–ø–∏—Å–∫–∏) ==================
def _num_in(text, key, default=None):
    m = re.search(rf"{key}\s*([<>]=?|=)\s*([\d\s]+)", text)
    if not m: return None
    op, val = m.group(1), int(re.sub(r"\s+","", m.group(2)))
    return op, val

def _apply_num_filter(df, col, cond):
    if not cond: return df
    op, v = cond
    if op == ">":  return df[df[col] > v]
    if op == "<":  return df[df[col] < v]
    if op == ">=": return df[df[col] >= v]
    if op == "<=": return df[df[col] <= v]
    return df[df[col] == v]

def answer_freeform(msg:str):
    if st.session_state.get("tbl") is None:
        return None
    text = msg.strip()
    low  = text.lower()
    tbl  = st.session_state.tbl.copy()

    # –≥–æ—Ä–æ–¥
    m_city = re.search(r"(–≥–æ—Ä–æ–¥|–∏–∑)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-\s]+)", low)
    if m_city:
        city = m_city.group(2).strip().title()
        if "city" in tbl.columns:
            tbl = tbl[tbl["city"].fillna("").str.title() == city]

    # —Å—Ç–∞—Ç—É—Å
    m_status = re.search(r"(—Å—Ç–∞—Ç—É—Å|status)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-\s]+)", low)
    if m_status and "status" in tbl.columns:
        stq = m_status.group(2).strip().lower()
        tbl = tbl[tbl["status"].fillna("").str.lower().str.contains(stq)]

    # —á–∏—Å–ª–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    age_cond = _num_in(low, r"(–≤–æ–∑—Ä–∞—Å—Ç|age)")
    bal_cond = _num_in(low, r"(–±–∞–ª–∞–Ω—Å|balance|avg_balance)")
    if "age" in tbl.columns:
        tbl = _apply_num_filter(tbl, "age", age_cond)
    if "avg_balance_kzt" in tbl.columns:
        tbl = _apply_num_filter(tbl, "avg_balance_kzt", bal_cond)

    taxi_cond   = _num_in(low, r"(—Ç–∞–∫—Å–∏|taxi)")
    online_cond = _num_in(low, r"(–æ–Ω–ª–∞–π–Ω|online)")
    travel_cond = _num_in(low, r"(–ø—É—Ç–µ—à–µ—Å—Ç–≤|travel)")
    if "taxi_count" in tbl.columns:
        tbl = _apply_num_filter(tbl, "taxi_count", taxi_cond)
    if "online_3m" in tbl.columns:
        tbl = _apply_num_filter(tbl, "online_3m", online_cond)
    if "travel_spend_3m" in tbl.columns:
        tbl = _apply_num_filter(tbl, "travel_spend_3m", travel_cond)

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
    m_prod = re.search(r"(–ø—Ä–æ–¥—É–∫—Ç|product|–∫–∞—Ä—Ç–∞|–≤–∫–ª–∞–¥|–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)\s*[:=]?\s+(.+)$", low)
    if m_prod and "product" in tbl.columns:
        q = m_prod.group(2).strip()
        tbl = tbl[tbl["product"].fillna("").str.contains(q, case=False, na=False)]

    # –∞–≥—Ä–µ–≥–∞—Ç—ã
    if re.search(r"\b(—Å–∫–æ–ª—å–∫–æ|count|–∫–æ–ª-–≤–æ)\b", low):
        return f"–ü–æ–¥ —É—Å–ª–æ–≤–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(tbl)}."

    if re.search(r"\b(—Å—Ä–µ–¥–Ω(–µ–µ|–∏–π)|average|avg)\s+(–±–∞–ª–∞–Ω—Å|balance)\b", low):
        if len(tbl)==0: return "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ."
        v = tbl["avg_balance_kzt"].mean() if "avg_balance_kzt" in tbl.columns else None
        return "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: " + (fmt_int_kzt(v) if v is not None else "–Ω/–¥")

    if re.search(r"(—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏|—Ç–æ–ø|—á–∞—Å—Ç(—ã–µ|–æ—Ç–∞))\s+–ø–æ\s+–ø—Ä–æ–¥—É–∫—Ç", low) and "product" in tbl.columns:
        if len(tbl)==0: return "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ."
        vc = tbl["product"].value_counts().head(10)
        lines = [f"‚Ä¢ {k}: {v}" for k,v in vc.items()]
        return "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º (—Ç–æ–ø-10):\n" + "\n".join(lines)

    # —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö N
    m_list = re.search(r"(–ø–æ–∫–∞–∂–∏|—Å–ø–∏—Å–æ–∫|list)(?:\s+(\d+))?", low)
    if m_list:
        n = int(m_list.group(2)) if m_list.group(2) else 20
        cols = [c for c in ["client_code","name","age","city","status","product"] if c in tbl.columns]
        if len(tbl)==0: return "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ."
        preview = tbl[cols].head(n).to_string(index=False)
        return f"–ü–µ—Ä–≤—ã–µ {min(n,len(tbl))} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ:\n```\n{preview}\n```"

    # –ø—É—à/–ø–æ—á–µ–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ client_code
    m_push = re.search(r"(push|–ø—É—à|—É–≤–µ–¥–æ–º\w*)\s+(\d+)", low)
    if m_push:
        code = int(m_push.group(2))
        row = st.session_state.df[st.session_state.df["client_code"]==code]
        if len(row)==0: return "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        r = row.iloc[0]
        return f"{r['client_code']}: {r['product']}\n{r['push_notification']}"

    # –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏
    if re.search(r"(–æ–±—ä—è—Å–Ω–∏|–∫–∞–∫ —Ä–∞–±–æ—Ç(–∞–µ|)—Ç)\s+(—Å–∫–æ—Ä–∏–Ω–≥|scoring|—Ä–∞–Ω–∂–∏—Ä|–ª–æ–≥–∏–∫)", low):
        return ("–ú—ã —Å—á–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã (—Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–∏, —á–∞—Å—Ç–æ—Ç–∞ —Ç–∞–∫—Å–∏/–ø–æ–µ–∑–¥–æ–∫, FX-–æ–±–æ—Ä–æ—Ç, "
                "—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å, –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è), –æ—Ü–µ–Ω–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –≤—ã–≥–æ–¥—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É, "
                "–¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º –≤—ã–≥–æ–¥—ã –∫ —Å–∫–æ—Ä—É –∏ —Ä–∞–Ω–∂–∏—Ä—É–µ–º. –õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç ‚Äî —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—É–º–º–∞—Ä–Ω—ã–º —Å–∫–æ—Ä–æ–º.")

    return None

# ================== STATE ==================
if "df" not in st.session_state: st.session_state.df = None
if "ranks" not in st.session_state: st.session_state.ranks = {}
if "clients" not in st.session_state: st.session_state.clients = None
if "chat" not in st.session_state: st.session_state.chat = []
if "signals" not in st.session_state: st.session_state.signals = {}
if "tbl" not in st.session_state: st.session_state.tbl = None

# ================== SIDEBAR ==================
with st.sidebar:
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –ó–∞–≥—Ä—É–∑–∫–∞")
    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ dataset ZIP (case 1.zip)", type=["zip"])
    st.markdown('<span class="muted">–°—Ç—Ä—É–∫—Ç—É—Ä–∞: case 1/clients.csv –∏ client_*_transactions/transfers</span>', unsafe_allow_html=True)
    st.divider()
    st.markdown("### üß† –¢–µ–∫—Å—Ç –ø—É—à–∞")
    use_ai_push = st.checkbox("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—à —á–µ—Ä–µ–∑ –ò–ò", value=True)
    temp = st.slider("–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (temperature)", 0.0, 1.0, 0.2, 0.1)
    analyze = st.button("üîé –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

# ================== MAIN LAYOUT ==================
left, right = st.columns([0.52, 0.48], gap="large")

with left:
    st.markdown("### üí¨ –ò–ò-–∞–≥–µ–Ω—Ç")
    if not st.session_state.chat:
        st.session_state.chat.append(("assistant",
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP ‚Üí ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª.\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ê–ª–º–∞—Ç—ã –≤–æ–∑—Ä–∞—Å—Ç > 50 —Å –±–∞–ª–∞–Ω—Å–æ–º > 1 000 000?\n"
            "‚Ä¢ –ü–æ–∫–∞–∂–∏ 15 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç —Å –æ–Ω–ª–∞–π–Ω > 100 000\n"
            "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º\n"
            "‚Ä¢ push 27 / –ø–æ—á–µ–º—É 27\n"
            "–¢–∞–∫–∂–µ: –ø–æ—á–µ–º—É <id>, top <id>/top4 <id>, –Ω–∞–π—Ç–∏ <product>."
        ))

    if analyze:
        if not uploaded:
            st.session_state.chat.append(("assistant", "–ù–µ –≤–∏–∂—É ZIP. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–ª–µ–≤–∞."))
        else:
            try:
                zf = zipfile.ZipFile(io.BytesIO(uploaded.read()))
                clients = read_clients(zf)
                rows, ranks, all_signals = [], {}, {}
                api_key = os.getenv("OPENAI_API_KEY", "")
                for _, prof in clients.iterrows():
                    code = int(prof['client_code'])
                    tx, tr = read_client_frames(zf, code)
                    product, push_local, ranked, benefits, signals = pick_best_and_push(prof, tx, tr)

                    # –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—à –≥–æ—Ç–æ–≤, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø–µ—Ä–µ—Ñ—Ä–∞–∑ –ò–ò
                    final_push = push_local
                    if use_ai_push and api_key:
                        try:
                            candidate = generate_push_ai(api_key, temp, signals, base_text=push_local)
                            if candidate and len(candidate) >= 170:
                                final_push = candidate
                        except Exception:
                            pass

                    ranks[code] = ranked
                    all_signals[code] = signals
                    rows.append((code, product, final_push))

                main_df = pd.DataFrame(rows, columns=['client_code','product','push_notification'])

                # === –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø –°–í–û–ë–û–î–ù–´–• –í–û–ü–†–û–°–û–í ===
                sig_df = pd.DataFrame.from_dict(all_signals, orient="index")
                if "client_code" not in sig_df.columns:
                    sig_df["client_code"] = sig_df.index
                tbl = (clients.merge(sig_df, on="client_code", how="left")
                              .merge(main_df, on="client_code", how="left"))
                if "avg_monthly_balance_KZT" in tbl.columns:
                    tbl = tbl.rename(columns={"avg_monthly_balance_KZT":"avg_balance_kzt"})

                st.session_state.df = main_df
                st.session_state.ranks = ranks
                st.session_state.clients = clients
                st.session_state.signals = all_signals
                st.session_state.tbl = tbl

                st.session_state.chat.append(("assistant", "–ì–æ—Ç–æ–≤–æ ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã. –°–ø—Ä–∞–≤–∞ ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –∏ –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."))
            except Exception as e:
                st.session_state.chat.append(("assistant", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ ZIP: {e}"))

    for role, text in st.session_state.chat:
        st.chat_message(role).write(text)

    user_msg = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É‚Ä¶")
    if user_msg:
        st.chat_message("user").write(user_msg)
        msg, low = user_msg.strip(), user_msg.strip().lower()
        reply = None

        # –ª–æ–∫–∞–ª—å–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (–±–µ–∑ API)
        reply = answer_local(msg) or reply

        # —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Ñ–∏–ª—å—Ç—Ä—ã/–∞–≥—Ä–µ–≥–∞—Ç—ã/—Å–ø–∏—Å–∫–∏)
        if reply is None:
            reply = answer_freeform(msg)

        # top4
        if reply is None and low.startswith("top4"):
            parts = re.findall(r"\d+", low)
            if parts:
                code = int(parts[0])
                if code in st.session_state.ranks:
                    r = st.session_state.ranks[code][:4]
                    reply = "–¢–æ–ø-4 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ " + str(code) + ":\n" + "\n".join([f"‚Ä¢ {p} ‚Äî {round(s,2)}" for p,s in r])
                else: reply = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ client_code."
            else: reply = "–§–æ—Ä–º–∞—Ç: `top4 12`"

        # top
        if reply is None and re.match(r"^top\b", low):
            nums = re.findall(r"\d+", low)
            if nums:
                code = int(nums[0])
                if code in st.session_state.ranks:
                    full = st.session_state.ranks[code]
                    reply = "–ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ " + str(code) + ":\n" + "\n".join([f"{i}. {p} ‚Äî {round(s,2)}" for i,(p,s) in enumerate(full,1)])
                else: reply = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ client_code."
            else:
                reply = "–£–∫–∞–∂–∏—Ç–µ client_code: `top 12`"

        # –Ω–∞–π—Ç–∏
        if reply is None and (low.startswith("–Ω–∞–π–¥–∏") or low.startswith("find")):
            q = msg[5:].strip() if low.startswith("–Ω–∞–π–¥–∏") else msg[4:].strip()
            if st.session_state.df is None: reply = "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª."
            elif not q: reply = "–§–æ—Ä–º–∞—Ç: `–Ω–∞–π–¥–∏ –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞`"
            else:
                sub = st.session_state.df[st.session_state.df['product'].str.contains(q, case=False, na=False)]
                if len(sub)==0: reply = f"–ö–ª–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º ¬´{q}¬ª, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                else:
                    preview = sub[['client_code','product']].head(20).to_string(index=False)
                    reply = f"–ù–∞–π–¥–µ–Ω–æ {len(sub)} –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–µ—Ä–≤—ã–µ 20:\n```\n{preview}\n```"

        # –ø–æ—á–µ–º—É
        if reply is None and (low.startswith("–ø–æ—á–µ–º—É") or low.startswith("why")):
            nums = re.findall(r"\d+", low)
            if not nums: reply = "–£–∫–∞–∂–∏—Ç–µ client_code: `–ø–æ—á–µ–º—É 12`"
            else:
                code = int(nums[0])
                if st.session_state.df is None or st.session_state.clients is None or code not in st.session_state.ranks:
                    reply = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ client_code. –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ."
                else:
                    best_row = st.session_state.df[st.session_state.df["client_code"]==code].iloc[0]
                    best_product = best_row["product"]
                    ranked = st.session_state.ranks[code]
                    s = st.session_state.signals.get(code, {})
                    api_key = os.getenv("OPENAI_API_KEY", "")
                    if not api_key:
                        # –ª–æ–∫–∞–ª—å–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                        top4 = "\n".join([f"{i}. {p}" for i,(p,_) in enumerate(ranked[:4],1)])
                        why_bits = []
                        if best_product == P_TRAVEL and s.get("taxi_count",0)>0: why_bits.append(f"—á–∞—Å—Ç—ã–µ —Ç–∞–∫—Å–∏ ({s.get('taxi_count')})")
                        if best_product == P_CC and s.get("top_categories"): why_bits.append(f"—Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(s.get('top_categories')[:3])}")
                        if best_product == P_PREM and s.get("avg_balance",0)>1_000_000: why_bits.append("–≤—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫")
                        hint = ("; ".join(why_bits)) if why_bits else "—Å–∏–≥–Ω–∞–ª—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –æ–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞"
                        reply = (f"–õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è {code}: {best_product} ‚Äî –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–∏–≥–Ω–∞–ª–∞–º ({hint}).\n"
                                 f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:\n{top4}")
                    else:
                        try:
                            from openai import OpenAI
                            client = OpenAI(api_key=api_key)
                            sys_prompt = ("–¢—ã ‚Äî –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –û–±—ä—è—Å–Ω–∏ –≤—ã–±–æ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—é. "
                                          "–ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ ¬´–≤—ã¬ª, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ 1‚Äì2 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–∑ —Ç–æ–ø–∞.")
                            messages = [
                                {"role": "system", "content": sys_prompt},
                                {"role": "user", "content": f"–õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç: {best_product}. –¢–æ–ø: {ranked[:6]}. –°–∏–≥–Ω–∞–ª—ã: {s}."}
                            ]
                            ans = client.chat.completions.create(model="gpt-4o-mini", messages=messages, temperature=0.2)
                            reply = ans.choices[0].message.content.strip()
                        except Exception as e:
                            reply = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ OpenAI API: {e}"

        # –æ–±—â–∏–π —Ñ–æ–ª–ª–±–µ–∫
        if reply is None:
            api_key = os.getenv("OPENAI_API_KEY", "")
            if api_key and (st.session_state.df is not None):
                try:
                    sample = st.session_state.df.head(8).to_dict(orient="records")
                    from openai import OpenAI
                    client = OpenAI(api_key=api_key)
                    system = ("–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –¥–∞—Ç–∞—Å–µ—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏–∫—É –ø—É—à–µ–π. –ö—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ.")
                    ans = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[{"role":"system","content":system},
                                  {"role":"user","content":f"–í–æ–ø—Ä–æ—Å: {msg}\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {sample}"}],
                        temperature=0.3)
                    reply = ans.choices[0].message.content.strip()
                except Exception as e:
                    reply = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ OpenAI API: {e}"
            else:
                reply = ("–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ö–æ–º–∞–Ω–¥—ã: `–ø–æ—á–µ–º—É <id>`, `top <id>`, `top4 <id>`, "
                         "`–Ω–∞–π–¥–∏ <product>`, `push <id>`, `—Å–∏–≥–Ω–∞–ª—ã <id>`, `—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤`, `—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å`, "
                         "`–ø–æ –ø—Ä–æ–¥—É–∫—Ç—É <–Ω–∞–∑–≤–∞–Ω–∏–µ>`.\n–ü–∏—à–∏—Ç–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≥–æ—Ä–æ–¥—É/—Å—Ç–∞—Ç—É—Å—É/–≤–æ–∑—Ä–∞—Å—Ç—É/–±–∞–ª–∞–Ω—Å—É/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")

        st.session_state.chat.append(("assistant", reply))
        st.rerun()

with right:
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    if st.session_state.df is None:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª.")
    else:
        st.container(border=True).dataframe(st.session_state.df, use_container_width=True, height=520)
        csv_bytes = st.session_state.df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV", data=csv_bytes, file_name="case1_recommendations.csv", mime="text/csv")
        st.caption("CSV: client_code, product, push_notification.")
